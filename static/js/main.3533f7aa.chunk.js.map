{"version":3,"sources":["Counter.js","App.js","serviceWorker.js","index.js"],"names":["Counter","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","props","eventLogger","e","data","console","log","state","p1","score","set","p2","style","display","flexDirection","alignItems","justifyContent","scoreData","this","onPositiveSwipe","onNegativeSwipe","bgColor","Component","ScoreView","offset","onStartSwipe","y","onFinishSwipe","rate","window","innerHeight","windowHeight","windowWidth","innerWidth","handleResize","bind","addEventListener","WindowSize","event","setState","width","height","fontSize","backgroundColor","axis","handle","defaultPosition","x","position","grid","scale","onStart","onDrag","handleDrag","onStop","className","textAlign","margin","marginBottom","padding","Math","min","useStyles","Boolean","location","hostname","match","ReactDOM","render","classes","name","content","AppBar","Toolbar","Typography","variant","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3533f7aa.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { render } from 'react-dom'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Draggable from 'react-draggable';\n\nconst SWIPED_DISTANCE = 150\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n    },\n}));\n\nclass Counter extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            p1: {\n                score: 0,\n                set: 0\n            },\n            p2: {\n                score: 0,\n                set: 0\n            }\n        }\n    }\n\n    eventLogger = (e, data) => {\n        console.log('Event: ', e);\n        console.log('Data: ', data);\n    };\n\n    render() {\n\n        return (\n            <div style={{ display: 'flex', flexDirection: 'col', alignItems: 'center', justifyContent: 'center' }}>\n                <ScoreView\n                    scoreData={this.state.p1}\n                    onPositiveSwipe={() => {\n                        console.log(\"positive swipe\")\n                    }}\n                    onNegativeSwipe={() => {\n                        console.log(\"negative swipe\")\n                    }\n                    }\n                    bgColor='red'\n                />\n                <ScoreView\n                    scoreData={this.state.p2}\n                    onPositiveSwipe={() => {\n                        console.log(\"positive swipe\")\n                    }}\n                    onNegativeSwipe={() => {\n                        console.log(\"negative swipe\")\n                    }\n                    }\n                    bgColor='blue'\n                />\n            </div>\n        )\n    }\n}\n\nclass ScoreView extends Component {\n    offset = 0\n\n    constructor() {\n        super();\n        this.state = {\n            windowHeight: window.innerHeight,\n            windowWidth: window.innerWidth\n        }\n        this.handleResize = this.handleResize.bind(this);\n    }\n    componentDidMount() {\n        window.addEventListener(\"resize\", this.handleResize);\n    }\n    componentWillUnmount() {\n        window.addEventListener(\"resize\", null);\n    }\n    handleResize(WindowSize, event) {\n        this.setState({ windowHeight: window.innerHeight, windowWidth: window.innerWidth })\n    }\n\n    onStartSwipe = (e, data) => {\n        this.offset = data.y\n    };\n\n    onFinishSwipe = (e, data) => {\n        let deltaY = data.y - this.offset;\n        let height = window.innerHeight;\n        let rate = deltaY / height;\n\n        if (rate > 0.3) {\n            this.props.onPositiveSwipe();\n        } else if (rate < -0.3) {\n            this.props.onNegativeSwipe();\n        }\n    };\n\n    render() {\n\n        // スワイプ量に合わせて、要素の位置を変更する.\n        let style = {\n            width: '50vw',\n            height: '100vh',\n            fontSize: '100',\n            backgroundColor: this.props.bgColor\n        }\n\n        return (\n            <Draggable\n                axis=\"none\"\n                handle=\".handle\"\n                defaultPosition={{ x: 0, y: 0 }}\n                position={null}\n                grid={[25, 25]}\n                scale={1}\n                onStart={this.onStartSwipe}\n                onDrag={this.handleDrag}\n                onStop={this.onFinishSwipe}>\n                <div>\n                    <div className=\"handle\" style={style}>\n                        <div>\n                            <div style={{\n                                textAlign: 'center',\n                            }}>\n                                <h1 style={{ margin: 0, marginBottom: '0', padding: 0, fontSize: Math.min(this.state.windowHeight * 0.5, this.state.windowWidth * 0.7), backgroundColor: 'green' }}>{this.props.scoreData.score}</h1>\n                                <h2 style={{ margin: 0, fontSize: Math.min(this.state.windowHeight * 0.2, this.state.windowWidth * 0.2), height: this.state.windowHeight * 0.2 }}>{this.props.scoreData.score}</h2>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </Draggable>\n\n        )\n    }\n}\n\nexport default Counter","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Counter from './Counter'\nimport { RemoveScroll } from 'react-remove-scroll';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nexport default function ButtonAppBar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <meta name=\"apple-mobile-web-app-capable\" content=\"yes\"></meta>\n      <meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black-translucent\"></meta>\n      <RemoveScroll>\n        <AppBar position=\"static\">\n          <Toolbar>\n            <Typography variant=\"h6\" className={classes.title}>\n              News\n          </Typography>\n          </Toolbar>\n        </AppBar>\n        <Counter />\n      </RemoveScroll>\n    </div>\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}